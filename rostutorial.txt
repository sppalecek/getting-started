ROS System Tutorial
	Made by Ryan Zavoral


---------start sub-------------
start ros main - roscore &
start simulator - rosrun subsim sim
start software stack - roslaunch subsim run.launch

---------start boat------------
start rosmain - roscore &
start boatsim and software stack - roslaunch boatsim run.launch

-------waypoint aliases--------
send waypoints - 
- alias wp="rosrun sub_launch send_waypoint"
- alias k="rosrun kill_handling kill"
- wp direction(forward, raise, depth, left, right) magnitude

----------Camera---------------
run camera
rosrun ueye2 ueye2

show forward camera - rosrun image_view image_view image:=(output device)
-CHOOSE ONE OF THE FOLLOWING AT THIS POINT (More output devices exist so we need to find their names so that they may be accessed) 
output device1 = forward_camera/image_rect_color
output device2 = image_raw/

record video rosbag from front - rosbag record -O #NAME_OF_VIDEO# /forward_camera/(output device)
record video rosbag from boat - rosbag record -O #NAME_OF_VIDEO# /(output device)
play rosbag video - rosbag play #NAME_OF_VIDEO#.bag

-----Magnetic Calibration-----
Kill the submarine (by pressing 1)
Start recording raw magnetic data (rosbag record /imu/mag_raw)
Rotate the submarine, sampling every possible rotation (look at subsim's README.md)
Stop recording (press Ctrl-c on rosbag)
Generate the calibration result (rosrun magnetic_hardsoft_compensation generate_config NAME_OF_THE_BAG_FILE_YOU_PRODUCED). Make sure that the points cover the entire sphere. If they don't, re-record the data. Close the window.
Paste the generated configuration (the last 5 lines of output after closing the window) into sub_launch/launch/common.xml, replacing the similar 5 lines that are already there.
Stop and restart the main "roslaunch subsim run.launch" process to load the new configuration.

---------boat startup---------
(for actual boat...make sure you are ssh'd in. Only one person should do this at a time)
roscore &
roslaunch propagator_motor_driver start_motor_driver.launch //starts only motors
rosrun thruster_mapper thruster_mapper //displays thruster values
rosrun thruster_mapper joy_to_wrench joy:=spacenav/joy //3d mouse mapped to thrusters

-----Display info tests-------
rostopic echo /gps
rostopic echo /odom
rostopic echo /trajectory

---------Git------------------
If second command doesnt work - git stash
git pull /home/fvoight/catkin_ws/src/uf-mil/PropaGator

--------Waypoints Boat -------
roslaunch boat_launch navigation.launch //gps takes a bit to synch so leave running
roslaunch boat_launch run.launch //runs software stack and motors (basically everything, runs some stuff from line 42)
From file - /sub_launch/scripts/send_waypoint (this is an executable)
'send_waypoint depth 2'
'send_waypoint forward 5 --speed .2'
'send_waypoint set_orientation NORTH'
'send_waypoint yaw_left_deg 30'

-----------Motor-------------- 
manual edit calibration: pd_controller.py

---Getting Used to System-----
NAVIGATE THROUGH IT - check what is executable, compare it with some of the commands in this file, try some stuff out that you think is convuluted or obtuse
rqt_graph //shows graph allows user to become acquainted with the system











-----------------------Make Models for Simulator--------------------------------------------------------------
Can choose object or edit mode based on the bottom tab
-------Controls------
hold middle mouse button - turn camera
scroll middle mouse button - zoom in/out
'b' then click and drag - select specific edges or vertices
'a' - select all and unselect all
'g' - grab
	'x' - to move in x coords only
	'y' - to move in y coords only
	'z' - to move in z coords only
'r' - rotate (x, y, z)
'x' - delete selected object

--------Panels-------
'n' - opens transform panel to move the selected object based on coord
in edit mode use subdivide on the left panel to allow more locations of movement on a line
common to delete different vertices to leave a line and then create a vertical plane afterwards using subdivice on points

------Making Model---
1. Delete default block
2. Consider a spatial method to easily deconstruct the object you are creating (ex. make a single plane and rotate or add default shapes)
3. Add an object that you can easily deconstruct
4. Set imperial units under scene on the right panel (this changes the grid)
5. Deconstruct the shape or add more objects
6. move vertices to specific locations of merit(subdivide to get more points)
7. Rotate or ascribe more dimension to the object
8. Render image to see how the object will look
9. save as a blend file
10. export as an obj file - click triangulate faces - change forward to y forward

--Uploading To World--
upload by finding the file through 
-roscd boatsim
-cd scripts
-TEXT_EDITOR sim 
Type this code and change every iteration of FILE_NAME OR NAME to your decided name or file name.
NAME_mesh = threed.mesh_from_obj(roslib.packages.resource_file('boatsim', 'models', 'FILE_NAME.obj')) // gives access to the file
NAME_mesh = NAME_mesh.translate((x,y,z)) //moves the object
w.objs.append(NAME_mesh) //adds to world
NAME_geom = ode.GeomTriMesh(NAME_mesh.ode_trimeshdata, space) // this line makes it so the object is solid


